* rpn-calc.el

プログラマ向け RPN 電卓

quick RPN calculator for hackers

** Screencast

[[img/screencast.gif]]

** Advantages

=rpn-calc= is designed to be a handy tool for daily programming
use. For example,

- =rpn-calc= uses popup instead of making a new window, and you don't
  need to move your eyes between the edit point and calc window.

- =rpn-calc= displays binary representation of numbers automatically,
  which may be useful for programmers.

- =rpn-calc= is easier to customize. You can add/remove some
  operators with just one or two lines of Emacs Lisp.

- You can push not only numbers but any Emacs Lisp objects to the
  stack, and you can apply any Lisp function to them. So =rpn-calc=
  can also be used as an interactive, RPN version of
  =eval-expression=.

** Installation

Require this script

: (require 'rpn-calc)

and invoke with =M-x rpn-calc=.

** Tutorial

1. You can push objects by pressing =[SPC]= after entering an
   S-expression (try: =120[SPC]=). You can also enter more complex
   S-expressisons like =(1+ (point))=.

2. When you enter an operator name, top elements in the stack are
   popped and applied to the operator (try: =1[SPC]sin=). List of
   built-in operators are listed below. You can add some operators by
   setting variable =rpn-calc-operator-table=.

3. You can also enter a function symbol to call it (try:
   =10[SPC]'number-to-string[SPC]=). If the function accepts =&rest=
   arguments, all elements in the stack are passed (try:
   =10[SPC]20[SPC]30[SPC]'list[SPC]=). This behavior can be changed by
   setting =rpn-calc-apply-rest-args=.

** Built-in Operators

- math
  - + :: pop =y=, =x= and push =(+ x y)=
  - -- :: pop =y=, =x= and push =(- x y)=
  - / :: pop =y=, =x= and push =(/ x y)=
  - * :: pop =y=, =x= and push =(* x y)=
  - % :: pop =y=, =x= and push =(mod x y)=
  - sin :: pop =x= and push =(sin x)=
  - cos :: pop =x= and push =(cos x)=
  - tan :: pop =x= and push =(tan x)=
  - ln :: pop =x= and push =(log x)=
  - lg :: pop =x= and push =(log x 10)=
  - log :: pop =y=, =x= and push =(log y x)=

- bitwise
  - & :: pop =y=, =x= and push =(logand x y)= (bitwise and)
  - | :: pop =y=, =x= and push =(logor x y)= (bitwise or)
  - ^ :: pop =y=, =x= and push =(logxor x y)= (bitwise xor)
  - ~ :: pop =x= and push =(lognot x)= (bitwise not)
  - << :: pop =y=, =x= and push =(ash x y)= (shift left)
  - >> :: pop =y=, =x= and push =(ash x (- y))= (shift right)

- other
  - : :: pop =x=, and push =x= twice (duplicate)
  - \ :: pop =x=, =y= and push =y=, =x= (swap)

** Other Features

- auto-committing

  If there seems no ambiguity, rpn-calc automatically commits the
  input after entering :

  - non-digit character after a number ::

    =1'1+[SPC]= is equivalent to =1[SPC]'1+[SPC]=.

  - outer-most closing paren ::

    =(1+ (point))[SPC]= is equivalent to =(1+ (point))=.

  - complete operator name ::

    =1sin= is equivalent to =1sin[SPC]=.

- display binary representation of numbers

  When you push some numbers, their binary representation is
  displayed.

- function quote

  You can quote function (tell rpn-calc not to call it) with function
  quote (=#'​=).

** Dependencies

- popup.el
